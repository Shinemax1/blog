(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{172:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"模块分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块分类","aria-hidden":"true"}},[e._v("#")]),e._v(" 模块分类")]),e._v(" "),a("h2",{attrs:{id:"核心模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心模块","aria-hidden":"true"}},[e._v("#")]),e._v(" 核心模块")]),e._v(" "),a("blockquote",[a("p",[e._v("\bnode编译过程编译了\b二进制文件，之后在node启动时会直接加载在内存中，文件定位和编译执行这两个步骤会被省略掉，并且路径分析优先判断，加载速度是最快的。")])]),e._v(" "),a("h3",{attrs:{id:"编译过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译过程","aria-hidden":"true"}},[e._v("#")]),e._v(" 编译过程")]),e._v(" "),a("h4",{attrs:{id:"js核心模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js核心模块","aria-hidden":"true"}},[e._v("#")]),e._v(" js核心模块")]),e._v(" "),a("ul",[a("li",[e._v("node采用了v8附带的js2c.py工具，将所有（src/node.js和lib/*.js）js文件转换成C++里的数组。")]),e._v(" "),a("li",[e._v("过程中js以字符串的形式放在node的命名空间中，直到node进程启动，会被加载到内存中，之后找js核心模块会直接通过标识符分析直接定位到内存中，优先于文件模块。")]),e._v(" "),a("li",[e._v("和文件模块的区别在于，直接从内存中或者缓存执行结果中获取，process.binding('natives')，缓存结果放在NativeModule._cache而不是Module._cache")])]),e._v(" "),a("h4",{attrs:{id:"c-核心模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-核心模块","aria-hidden":"true"}},[e._v("#")]),e._v(" C++核心模块")]),e._v(" "),a("ul",[a("li",[e._v("所有的文件源代码会被放在node_module_list数组中，并被放在node命名空间中")]),e._v(" "),a("li",[e._v("node进程执行时会被加载到内存，因为是二进制文件，不需要路径分析、文件定位、编译执行，直接可执行。取出可通过get_builtin_module在node_module_list数组中取出模块")]),e._v(" "),a("li",[e._v("register_func将js2c.py转换成的字符串重新转换为js字符串")])]),e._v(" "),a("h2",{attrs:{id:"文件模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件模块","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件模块")]),e._v(" "),a("blockquote",[a("p",[e._v("是node运行时动态时加载，需要路径分析，文件定位，编译执行，速度慢于核心模块。")])]),e._v(" "),a("h2",{attrs:{id:"模块缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块缓存","aria-hidden":"true"}},[e._v("#")]),e._v(" 模块缓存")]),e._v(" "),a("ol",[a("li",[e._v("浏览器缓存的是文件，node缓存的是编译执行的对象")]),e._v(" "),a("li",[e._v("核心模块优先于文件模块")]),e._v(" "),a("li",[e._v("node不需要\b路径分析、文件定位、编译执行，直接从缓存对象中去")])]),e._v(" "),a("h2",{attrs:{id:"路径分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#路径分析","aria-hidden":"true"}},[e._v("#")]),e._v(" 路径分析")]),e._v(" "),a("ul",[a("li",[e._v("直接找核心模块（fs、stream、http）")]),e._v(" "),a("li",[e._v("路径形式的文件模块（../、./）")]),e._v(" "),a("li",[e._v("自定义模块（通过node_modules往上找父文件）")])]),e._v(" "),a("h2",{attrs:{id:"文件定位"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件定位","aria-hidden":"true"}},[e._v("#")]),e._v(" 文件定位")]),e._v(" "),a("ul",[a("li",[e._v("文件扩展名\n"),a("ul",[a("li",[e._v("node通过补充文件的后缀名（.js、.json、.node），定位文件。可以通过自己补充文件后缀达到优化文件模块加载速度的（.json、.node）。")])])])])])}],!1,null,null,null);r.options.__file="Readme.md";t.default=r.exports}}]);